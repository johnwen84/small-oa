[{"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/index.js":"1","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/App.js":"2","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/serviceWorker.js":"3","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/LandingPage/index.js":"4","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/LandingPage/LandingPage.js":"5","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Blockchain/index.js":"6","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Blockchain/Blockchain.js":"7","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/components/OAHeader/index.js":"8","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/components/OAHeader/OAHeader.js":"9","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Verify/index.js":"10","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Issue/index.js":"11","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Verify/Verify.js":"12","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Issue/Issue.js":"13","/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/oa.js":"14"},{"size":755,"mtime":1645754653137,"results":"15","hashOfConfig":"16"},{"size":587,"mtime":1645717867400,"results":"17","hashOfConfig":"16"},{"size":4951,"mtime":1645717867429,"results":"18","hashOfConfig":"16"},{"size":69,"mtime":1645717867424,"results":"19","hashOfConfig":"16"},{"size":1870,"mtime":1645741506344,"results":"20","hashOfConfig":"16"},{"size":66,"mtime":1645717867415,"results":"21","hashOfConfig":"16"},{"size":1561,"mtime":1645740716821,"results":"22","hashOfConfig":"16"},{"size":60,"mtime":1645717867408,"results":"23","hashOfConfig":"16"},{"size":1300,"mtime":1645732395753,"results":"24","hashOfConfig":"16"},{"size":54,"mtime":1645717867426,"results":"25","hashOfConfig":"16"},{"size":51,"mtime":1645717867419,"results":"26","hashOfConfig":"16"},{"size":1595,"mtime":1648847012334,"results":"27","hashOfConfig":"16"},{"size":6357,"mtime":1646101078373,"results":"28","hashOfConfig":"16"},{"size":6773,"mtime":1648844761650,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3a0zgk",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/index.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/App.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/serviceWorker.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/LandingPage/index.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/LandingPage/LandingPage.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Blockchain/index.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Blockchain/Blockchain.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/components/OAHeader/index.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/components/OAHeader/OAHeader.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Verify/index.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Issue/index.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Verify/Verify.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/content/Issue/Issue.js",[],"/Users/johnwen/IBM/Blockchain/ICC/small-oa/src/oa.js",["59"],"// const oa = require(\"@govtechsg/open-attestation\");\n// const docStore = require(\"@govtechsg/document-store\");\n// const ethers = require(\"ethers\");\n// const axios = require('axios');\n// const fs = require(\"fs\");\n\nimport {\n  wrapDocument,\n  validateSchema,\n  verifySignature,\n  getData\n} from '@govtechsg/open-attestation';\nimport { connect } from '@govtechsg/document-store';\nimport {\n  verificationBuilder, \n  openAttestationVerifiers, \n  isValid \n} from '@govtechsg/oa-verify';\nimport { getDefaultProvider, Wallet } from 'ethers';\nimport axios from 'axios';\nimport fs from 'fs';\n\ntry {\n  // goVerify();\n  // goIssue();\n  // registerDNS(3, \"0xFdda6f76735BE5860d1d9Bd8C0F79a09826558C5\");\n  // deployStore();\n} catch (err) {\n  console.error('Failed - ', err);\n}\n\n// async function deployStore() {\n//   const ropstenProvider = getDefaultProvider('ropsten');\n//   const walletStr = fs.readFileSync('../OA/wallet.json').toString();\n//   const wallet = Wallet.fromEncryptedJsonSync(walletStr, 'johnwen').connect(\n//     ropstenProvider\n//   );\n\n//   const factory = new DocumentStoreFactory(wallet);\n//   const documentStore = await factory.deploy(\"OA_DOCUMENT_STORE\");\n//   await documentStore.deployTransaction.wait();\n//   console.log(\"documentStore.address=\", documentStore.address);\n//   return documentStore.address;\n// }\n\nexport async function goVerify() {\n  console.log('reading document...');\n  const wrappedDocument = fs\n    .readFileSync('../OA/DocStore/wrapped-documents/doc0.json')\n    .toString();\n\n  console.log('validating document...');\n  validateSchema(wrappedDocument);\n\n  console.log('verifying document...');\n  const verified = verifySignature(JSON.parse(wrappedDocument));\n  console.log(verified);\n\n  const data = getData(wrappedDocument);\n  return data;\n}\n\nexport async function goIssue() {\n  console.log('dycryping wallet...');\n  const ropstenProvider = getDefaultProvider('ropsten');\n  const walletStr = fs.readFileSync('../OA/wallet.json').toString();\n  const wallet = Wallet.fromEncryptedJsonSync(walletStr, 'johnwen').connect(\n    ropstenProvider\n  );\n\n  const raw = fs\n    .readFileSync('../OA/DocStore/raw-documents/doc0.json')\n    .toString();\n  console.log('wrapping...');\n  const wrapped = wrapDocument(JSON.parse(raw));\n  fs.writeFileSync(\n    '../OA/DocStore/wrapped-documents/doc0.json',\n    JSON.stringify(wrapped, null, 2)\n  );\n  const merkleRoot = '0x' + wrapped.signature.merkleRoot;\n\n  console.log('connecting to document store...');\n  const documentStore = await connect(\n    '0xFdda6f76735BE5860d1d9Bd8C0F79a09826558C5',\n    wallet\n  );\n\n  console.log('issuing...');\n  const tx = await documentStore.issue(merkleRoot);\n  await tx.wait();\n\n  //const isIssued = await instance.isIssued(merkleRoot);\n  //console.log(isIssued);\n\n  //const signed = await oa.signDocument(wrapped, oa.SUPPORTED_SIGNING_ALGORITHM.Secp256k1VerificationKey2018, wallet);\n  //console.log(\"signed=\", signed);\n\n  console.log('done.');\n}\n\nexport async function registerDNS(networkId, documentStore) {\n  console.log('registering DNS...');\n  const baseUrl = 'https://sandbox.openattestation.com';\n  try {\n    const execution = await axios.post(\n      baseUrl,\n      {\n        networkId: networkId,\n        address: documentStore,\n      },\n      {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n\n    // const params = new URLSearchParams();\n    // params.append('networkId', networkId);\n    // params.append('address', documentStore);\n    // const execution = await axios.post(baseUrl, params);\n\n    const executionId = execution.data.executionId;\n    console.log('executionId=', executionId);\n    const dnsRes = await axios.get(`${baseUrl}/execution/${executionId}`);\n    const dns = dnsRes.data;\n    console.log(\n      `Record created at ${dns.name} and will stay valid until ${new Date(\n        dns.expiryDate\n      ).toString()}`\n    );\n    return {\n      executionId,\n      name: dns.name,\n      expiryDate: dns.expiryDate,\n    };\n  } catch (e) {\n    console.error(\"Failed to register DNS - \", e.message);\n  }\n}\n\nexport async function decryptWallet(network, walletEnc, password) {\n  console.log('dycryping wallet...');\n  const ropstenProvider = getDefaultProvider(network);\n  const walletDec = Wallet.fromEncryptedJsonSync(walletEnc, password).connect(\n    ropstenProvider\n  );\n  return walletDec;\n}\n\nexport async function wrapOADocument(documentRaw) {\n  console.log('wrapping document...');\n  const documentWrapped = wrapDocument(documentRaw);\n  const merkleRoot = '0x' + documentWrapped.signature.merkleRoot;\n  return {\n    merkleRoot,\n    documentWrapped,\n  };\n}\n\nexport async function issueOADocument(wallet, store, merkleRoot) {\n  console.log('connecting to document store...');\n  const documentStore = await connect(\n    store,\n    wallet\n  );\n\n  console.log('issuing...');\n  const tx = await documentStore.issue(merkleRoot);\n  await tx.wait();\n}\n\nexport async function verifyOADocument(payload) {\n  const network = payload.network;\n  const wrappedDocument = payload.document;\n  console.log(`validating document on network ${network}...`);\n  validateSchema(wrappedDocument);\n\n  console.log('verifying document...');\n  const verify = verificationBuilder(openAttestationVerifiers, { network: network });\n  const fragments = await verify(wrappedDocument);\n  console.log(\"fragments=\", fragments);\n  const verified = isValid(fragments); \n  let error;\n  if(!verified) {\n    for(const fragment of fragments) {\n      if(fragment.status=='ERROR') {\n        error = fragment.reason.message;\n      }\n    }\n  }\n  return { \n      verified,\n      error\n  };\n\n  //const verified = verifySignature(JSON.parse(wrappedDocument));\n  //return verified;\n\n  // //const data = getData(wrappedDocument);\n  // //return data;\n}\n\nconst defaultWallet =\n  '{\"address\":\"ff7da6841cfd993ecb67668add984ae41a766e58\",\"id\":\"b3a09b2d-6df6-4e7b-8190-65eceba38e48\",\"version\":3,\"Crypto\":{\"cipher\":\"aes-128-ctr\",\"cipherparams\":{\"iv\":\"505f691ba0a529eb969f40118b8b7ac7\"},\"ciphertext\":\"a1691446a5d2715841fbc7acb17710c79dc485c6f6f05eabaa1c46aa8216e6d4\",\"kdf\":\"scrypt\",\"kdfparams\":{\"salt\":\"8b7b2d47c6469f609ac6da29feea1dfd776feb68c7384277166251977958282a\",\"n\":131072,\"dklen\":32,\"p\":1,\"r\":8},\"mac\":\"9669fcaf20762baf7aff27f0aae10a50a9bebc102af85944e0f3de3e4128b6e0\"},\"x-ethers\":{\"client\":\"ethers.js\",\"gethFilename\":\"UTC--2021-11-03T15-13-16.0Z--ff7da6841cfd993ecb67668add984ae41a766e58\",\"mnemonicCounter\":\"f00f990392d70e0b3f2efd5c25919345\",\"mnemonicCiphertext\":\"e91ed4c14f674e411669855817cb18b2\",\"path\":\"m/44\\'/60\\'/0\\'/0/0\",\"locale\":\"en\",\"version\":\"0.1\"}}';\nconst cache = {\n  walletData: defaultWallet,\n};\n\nexport function getWalletData() {\n  return cache.walletData;\n}\n\nexport function setWalletData(walletData) {\n  return (cache.walletData = walletData);\n}\n",{"ruleId":"60","severity":1,"message":"61","line":187,"column":25,"nodeType":"62","messageId":"63","endLine":187,"endColumn":27},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]